import re

from django.core.exceptions import ObjectDoesNotExist
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views import View
from django.contrib import messages as err_msgs
from langchain import FAISS
from langchain.embeddings import OpenAIEmbeddings
from rest_framework import status
from rest_framework.request import Request
from rest_framework.response import Response
from rest_framework.views import APIView

from osa_expert_admin.settings import MY_LOGGER, BOT_TOKEN
from osa_gpt.forms import NewApplicationForm
from osa_gpt.gpt_processing import make_embeddings, relevant_text_preparation, request_to_gpt
from osa_gpt.models import BotUser, BotSettings, Applications, KnowledgeBaseChunks, PromptsAI
from osa_gpt.serializers import GetSettingsSerializer
from osa_gpt.tasks import send_notifications, knowledge_base_processing


class WriteUsrView(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """

    def post(self, request):
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É WriteUsrView: {request.data}')

        if not request.data.get("token") or request.data.get("token") != BOT_TOKEN:
            MY_LOGGER.warning(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∑–∞–ø—Ä–æ—Å–∞: {request.data.get("token")} != {BOT_TOKEN}')
            return Response(status=status.HTTP_400_BAD_REQUEST, data='invalid token')

        MY_LOGGER.debug(f'–ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ –≤ –ë–î')
        bot_usr_obj, created = BotUser.objects.get_or_create(
            tlg_id=request.data.get("tlg_id"),
            defaults={
                "tlg_id": request.data.get("tlg_id"),
                "tlg_username": request.data.get("tlg_username"),
            }
        )
        MY_LOGGER.success(f'–î–∞–Ω–Ω—ã–µ –æ —é–∑–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ {"—Å–æ–∑–¥–∞–Ω—ã" if created else "–ø–æ–ª—É—á–µ–Ω—ã"} –¥–∞—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.')
        return Response(data=f'success {"write" if created else "update"} object of bot user!',
                        status=status.HTTP_200_OK)


class GetSettingsView(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–ª—é—á—É
    """
    def post(self, request: Request):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ key=–∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –û—Ç–¥–∞—ë—Ç JSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ª–∏–±–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
        """
        MY_LOGGER.debug(f'–ü—Ä–∏—à—ë–ª POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')

        serializer = GetSettingsSerializer(data=request.data)
        if serializer.is_valid() and serializer.validated_data.get("api_token") == BOT_TOKEN:
            key = serializer.validated_data.get("key")
            bot_settings = BotSettings.objects.filter(key=key)
            MY_LOGGER.debug(f'–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–ª—é—á—É {key!r}: {bot_settings}')
            return Response(data={'result': [i_set.value for i_set in bot_settings]}, status=status.HTTP_200_OK)
        else:
            MY_LOGGER.warning(f'–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')
            return Response(data={'result:' '–∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ'}, status=status.HTTP_400_BAD_REQUEST)


class NewApplication(View):
    """
    –í—å—é—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.
    """
    def get(self, request):
        """
        –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π
        """
        MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.')
        context = {}
        return render(request, template_name='osa_gpt/new_application.html', context=context)

    def post(self, request):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.
        """
        MY_LOGGER.info(f'–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏')

        form = NewApplicationForm(request.POST)
        if form.is_valid():
            phone_number = form.cleaned_data.get('phone_number')
            tlg_id = form.cleaned_data.get('tlg_id')

            # –ß–µ–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            reg = r'^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$'
            if not re.match(reg, phone_number):
                MY_LOGGER.warning(f'–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number!r}')
                err_msgs.error(request, message='–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')
                return redirect(to=reverse_lazy('osa_gpt:new_application'))

            # –ß–µ–∫–∞–µ–º ID —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
            elif not tlg_id or not tlg_id.isdigit():
                MY_LOGGER.warning(f'–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. '
                                  f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tlg_id')
                err_msgs.error(request, message='–û—à–∏–±–∫–∞: –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–æ—Ä–º—É –∏–∑ Telegram?')
                return redirect(to=reverse_lazy('osa_gpt:new_application'))

            # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            try:
                bot_usr_obj = BotUser.objects.get(tlg_id=tlg_id)
            except ObjectDoesNotExist:
                err_msgs.error(request, message='–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '
                                                '–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start.')
                return redirect(to=reverse_lazy('osa_gpt:new_application'))

            appl_obj = Applications.objects.create(
                name=form.cleaned_data.get('client_name'),
                phone_number=form.cleaned_data.get('phone_number'),
                description=form.cleaned_data.get('description'),
                bot_user=bot_usr_obj,
            )
            send_notifications.delay(appl_obj.pk, appl_obj.name, appl_obj.phone_number, appl_obj.description)

            # –î–∞—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            context = dict(
                header='‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!',
                description=f'üìå –ù–æ–º–µ—Ä –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ {appl_obj.pk}. –° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. '
                            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {appl_obj.phone_number} –¥–æ—Å—Ç—É–ø–µ–Ω. üì≤',
                btn_text='–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!'
            )
            return render(request, template_name='osa_gpt/success.html', context=context)
        else:
            MY_LOGGER.warning(f'–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {form.errors!r}')
            err_msgs.error(request, message=f'–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã. {form.errors!r}')
            return redirect(to=reverse_lazy('osa_gpt:new_application'))


class UploadKnowledgeBaseView(View):
    """
    –í—å—é—à–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    def get(self, request):
        MY_LOGGER.debug(f'–ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ó.')

        if not request.user.is_staff:
            MY_LOGGER.warning(f'–Æ–∑–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å staff. –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return redirect(to=f'/admin/login/?next={reverse_lazy("osa_gpt:upload_knowledge_base")}')

        context = {}
        return render(request, template_name='osa_gpt/upload_knowledge_base.html', context=context)

    def post(self, request):
        MY_LOGGER.debug(f'POST –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ó')

        if not request.user.is_staff:
            MY_LOGGER.warning(f'–Æ–∑–µ—Ä, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å staff. –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            return redirect(to=f'/admin/login/?next={reverse_lazy("mytlg:upload_new_channels")}')

        if not request.FILES.get("file"):
            MY_LOGGER.warning(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –≤ –∑–∞–ø—Ä–æ—Å–µ!')
            return HttpResponse(content='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –≤ –∑–∞–ø—Ä–æ—Å–µ', status=400)

        file = request.FILES.get("file")
        knowledge_base_processing.delay(knowledge_base_text=file.read().decode())
        return HttpResponse(content=f'–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª—ã, —Å–ø–∞—Å–∏–±–æ.')


class AnswerGPT(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª—å—é OpenAI.
    """
    def get(self, request):
        MY_LOGGER.info(f'GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—å—é—à–∫—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ–Ω–∫–æ–π.')

        if not request.GET.get('token') or request.GET.get('token') != BOT_TOKEN:
            MY_LOGGER.warning(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ: {request.GET!r}')
            return Response(data='invalid token', status=status.HTTP_400_BAD_REQUEST)

        if not request.GET.get('msg'):
            MY_LOGGER.warning(f'–í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä msg: {request.GET!r}')
            return Response(data='msg param is required!', status=status.HTTP_400_BAD_REQUEST)

        # –î–æ—Å—Ç–∞—ë–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
        MY_LOGGER.debug(f'–î–æ—Å—Ç–∞—ë–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –∏–∑ –ë–î.')
        base_text = relevant_text_preparation(query=request.GET.get('msg'))

        # –ö–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        MY_LOGGER.debug(f'–ö–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT')
        prompt = PromptsAI.objects.get(name='consultant').only('prompt').prompt
        gpt_answer = request_to_gpt(
            content=f"–î–æ–∫—É–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {base_text}\n\n"
                    f"–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:\n{request.GET.get('msg')}",
            system=prompt
        )
        if not gpt_answer:
            MY_LOGGER.warning(f'–ù–µ—É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –û—Ç–¥–∞—ë–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ–π –æ–± –æ—à–∏–±–∫–µ.')
            return Response(status=status.HTTP_400_BAD_REQUEST)

        return Response(data={'gpt_answer': gpt_answer}, status=status.HTTP_200_OK)

        # TODO: –≤—Ä–æ–¥–µ –¥–æ–ø–∏–ª–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞. –ù–µ —Ç–µ—Å—Ç–∏–ª. –ù—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –µ—â—ë –ø—Ä–æ–º–ø—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤–ø–∞—Ä–∏–≤–∞–ª —É—Å–ª—É–≥–∏.


def test_view(request):
    # chunks = make_embeddings(knowledge_base_path='/home/da/PycharmProjects/osa_expert_admin/–ë–∞–∑–∞_–∑–Ω–∞–Ω–∏–π_–£–ò–ò.txt')

    # –û—Ç–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Å–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (base_text), —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É (query)
    query = '–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –£–ò–ò'
    relevant_text_preparation(query=query)
    context = {}
    return render(request, template_name='osa_gpt/test.html', context=context)
